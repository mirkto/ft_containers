
 [0;35m
 ___---/ Start testing \---___[0m


 [0;35m
   ---| list testing |---[0m


 [0;33m--- default Constructor ---
[0m
[0;32m#print values: [0mSize: 0
[0;32m|[0mHead: 0 | 0 :Back
[0;32m \[0mTail -> Tail

 [0;33m--- push_back[0m
[0;32m#print values: [0mSize: 4
[0;32m|[0mHead: 0 | 42 :Back
[0;32m \[0mTail -> 0 -> 10 -> 21 -> 42 -> Tail

 [0;33m--- pop_back[0m
[0;32m#print values: [0mSize: 2
[0;32m|[0mHead: 0 | 10 :Back
[0;32m \[0mTail -> 0 -> 10 -> Tail

 [0;33m--- push_front[0m
[0;32m#print values: [0mSize: 4
[0;32m|[0mHead: 42 | 10 :Back
[0;32m \[0mTail -> 42 -> 21 -> 0 -> 10 -> Tail

 [0;33m--- pop_front[0m
[0;32m#print values: [0mSize: 2
[0;32m|[0mHead: 0 | 10 :Back
[0;32m \[0mTail -> 0 -> 10 -> Tail

 [0;33m
 ---| iterators_tests |---[0m

 [0;33m--- origin iterator[0m
[0;34miterator                   : [0m[0;32m \[0mTail -> one -> two -> Three -> Tail
[0;34mreverse iterator           :[0m
[0;32m \[0mTail -> Three -> two -> one -> Tail
[0;34m*test.begin() = "Laka"     : [0m[0;32m \[0mTail -> Laka -> two -> Three -> Tail
[0;34m*(++test.begin()) = "Shaka": [0m[0;32m \[0mTail -> Laka -> Shaka -> Three -> Tail

 --- reverse ---
[0;34m*test.rbegin() = "BOOM"    :[0m
[0;32m \[0mTail -> BOOM -> Shaka -> Laka -> Tail

 [0;33m --- my iterator[0m
[0;34miterator                   : [0m[0;32m \[0mTail -> one -> two -> Three -> Tail
[0;34mreverse iterator           :[0m
[0;32m \[0mTail -> Three -> two -> one -> Tail
[0;34m*test.begin() = "Laka"     : [0m[0;32m \[0mTail -> Laka -> two -> Three -> Tail
[0;34m*(++test.begin()) = "Shaka": [0m[0;32m \[0mTail -> Laka -> Shaka -> Three -> Tail

 --- reverse ---
[0;34m*test.rbegin() = "BOOM"    :[0m
[0;32m \[0mTail -> BOOM -> Shaka -> Laka -> Tail

 [0;33m --- const_iterator[0m
[0;34m origin iterator :[0m
[0;32m \[0mTail -> one -> two -> Three -> Tail
[0;34m my iterator     :[0m
[0;32m \[0mTail -> one -> two -> Three -> Tail

 [0;33m --- reverse_const_iterator[0m
[0;34m origin iterator :[0m
[0;32m \[0mTail -> Three -> two -> one -> Tail
[0;34m my iterator     :[0m
[0;32m \[0mTail -> Three -> two -> one -> Tail

 [0;33m --- const_iterator 2[0m

std:
list_test --- 21 - 21
list_test --- 5 - 21

ft:
list_test --- 21 - 21
list_test --- 5 - 21

 [0;33m
 ---| capacity_tests |---[0m
[0;32m#print values: [0mSize: 6
[0;32m|[0mHead: 21 | 0 :Back
[0;32m \[0mTail -> 21 -> 42 -> 36 -> 76 -> 5 -> 0 -> Tail

 [0;33m--- empty(no emtpy)[0m
[0;32m#print values: [0mSize: 6
[0;32m|[0mHead: 21 | 0 :Back
[0;32m \[0mTail -> 21 -> 42 -> 36 -> 76 -> 5 -> 0 -> Tail
[0;32mlist is empty?[0m
--> FALSE

 [0;33m--- empty(empty)[0m
[0;32m#print values: [0mSize: 4
[0;32m|[0mHead: 42 | 5 :Back
[0;32m \[0mTail -> 42 -> 36 -> 76 -> 5 -> Tail
[0;32mlist is empty?[0m
--> FALSE

 [0;33m--- size[0m
4

 [0;33m--- max size[0m
576460752303423487

 [0;33m
 ---| element_access_tests |---[0m
[0;32m#print values: [0mSize: 6
[0;32m|[0mHead: 21 | 0 :Back
[0;32m \[0mTail -> 21 -> 42 -> 36 -> 76 -> 5 -> 0 -> Tail

 [0;33m--- front[0m
-->21

 [0;33m--- back[0m
-->0

 [0;33m
 ---| modifiers_tests |---[0m

 [0;33m--- fill Constructors[0m
 --- create new 'test(5, 21)'
[0;32m#print values: [0mSize: 5
[0;32m|[0mHead: 21 | 21 :Back
[0;32m \[0mTail -> 21 -> 21 -> 21 -> 21 -> 21 -> Tail

 [0;33m--- test_copy[0m
 --- create new 'test_copy(test)'
[0;32m#print values: [0mSize: 5
[0;32m|[0mHead: 21 | 21 :Back
[0;32m \[0mTail -> 21 -> 21 -> 21 -> 21 -> 21 -> Tail

 [0;33m--- test_operator[0m
 --- create new 'test_operator(5, 42)'
[0;32m#print values: [0mSize: 5
[0;32m|[0mHead: 42 | 42 :Back
[0;32m \[0mTail -> 42 -> 42 -> 42 -> 42 -> 42 -> Tail
 --- 'test_operator = test_copy'
[0;32m#print values: [0mSize: 5
[0;32m|[0mHead: 21 | 21 :Back
[0;32m \[0mTail -> 21 -> 21 -> 21 -> 21 -> 21 -> Tail

 [0;33m--- resize[0m
[0;32m#print values: [0mSize: 5
[0;32m|[0mHead: 21 | 21 :Back
[0;32m \[0mTail -> 21 -> 21 -> 21 -> 21 -> 21 -> Tail
 --- 'resize(2)'
[0;32m#print values: [0mSize: 2
[0;32m|[0mHead: 21 | 21 :Back
[0;32m \[0mTail -> 21 -> 21 -> Tail
 --- 'test.resize(4, 48)'
[0;32m#print values: [0mSize: 4
[0;32m|[0mHead: 21 | 48 :Back
[0;32m \[0mTail -> 21 -> 21 -> 48 -> 48 -> Tail
 --- 'test.resize(6)'
[0;32m#print values: [0mSize: 6
[0;32m|[0mHead: 21 | 0 :Back
[0;32m \[0mTail -> 21 -> 21 -> 48 -> 48 -> 0 -> 0 -> Tail

 [0;33m--- swap[0m
 --- 'test' and 'test_copy'
[0;32m#print values: [0mSize: 6
[0;32m|[0mHead: 21 | 0 :Back
[0;32m \[0mTail -> 21 -> 21 -> 48 -> 48 -> 0 -> 0 -> Tail
[0;32m#print values: [0mSize: 5
[0;32m|[0mHead: 21 | 21 :Back
[0;32m \[0mTail -> 21 -> 21 -> 21 -> 21 -> 21 -> Tail

 --- 'test.swap(test_copy)'
[0;32m#print values: [0mSize: 5
[0;32m|[0mHead: 21 | 21 :Back
[0;32m \[0mTail -> 21 -> 21 -> 21 -> 21 -> 21 -> Tail
[0;32m#print values: [0mSize: 6
[0;32m|[0mHead: 21 | 0 :Back
[0;32m \[0mTail -> 21 -> 21 -> 48 -> 48 -> 0 -> 0 -> Tail

 [0;33m--- erase[0m
[0;32m#print values: [0mSize: 0
[0;32m|[0mHead: 0 | 0 :Back
[0;32m \[0mTail -> Tail

 [0;33m--- wrong pop_back[0m
[0;32m#print values: [0mSize: 0
[0;32m|[0mHead: 0 | 0 :Back
[0;32m \[0mTail -> Tail
[0;35m

 --- --- next test --- ---
[0m

 [0;33m--- assign[0m
[0;32m#print values: [0mSize: 0
[0;32m|[0mHead: 0 | 0 :Back
[0;32m \[0mTail -> Tail
[0;34mtest_copy.assign(test.begin(),test.end()):[0m
[0;32m#print values: [0mSize: 8
[0;32m|[0mHead: 21 | 21 :Back
[0;32m \[0mTail -> 21 -> 5 -> 21 -> 31 -> 21 -> 138 -> 1 -> 21 -> Tail
[0;34mtest_copy.assign(7,100):[0m
[0;32m#print values: [0mSize: 7
[0;32m|[0mHead: 100 | 100 :Back
[0;32m \[0mTail -> 100 -> 100 -> 100 -> 100 -> 100 -> 100 -> 100 -> Tail

 [0;33m--- erase[0m
[0;32m#print values: [0mSize: 8
[0;32m|[0mHead: 21 | 21 :Back
[0;32m \[0mTail -> 21 -> 5 -> 21 -> 31 -> 21 -> 138 -> 1 -> 21 -> Tail
[0;34mtest.erase(++test.begin()):[0m
[0;32m#print values: [0mSize: 7
[0;32m|[0mHead: 21 | 21 :Back
[0;32m \[0mTail -> 21 -> 21 -> 31 -> 21 -> 138 -> 1 -> 21 -> Tail
[0;34mtest.erase(test.begin(), --test.end()):[0m
[0;32m#print values: [0mSize: 1
[0;32m|[0mHead: 21 | 21 :Back
[0;32m \[0mTail -> 21 -> Tail

 [0;33m--- insert[0m
[0;32m#print values: [0mSize: 1
[0;32m|[0mHead: 21 | 21 :Back
[0;32m \[0mTail -> 21 -> Tail
[0;34mtest.insert(test.begin(), 777):[0m
insert return: 777[0;32m#print values: [0mSize: 2
[0;32m|[0mHead: 777 | 21 :Back
[0;32m \[0mTail -> 777 -> 21 -> Tail
[0;34mtest.insert(test.begin(), 2, 44):[0m
[0;32m#print values: [0mSize: 4
[0;32m|[0mHead: 44 | 21 :Back
[0;32m \[0mTail -> 44 -> 44 -> 777 -> 21 -> Tail
[0;34mtest.insert(++test.begin(), test_copy.begin(), it):[0m
[0;32m#print values: [0mSize: 7
[0;32m|[0mHead: 44 | 21 :Back
[0;32m \[0mTail -> 44 -> 100 -> 100 -> 100 -> 44 -> 777 -> 21 -> Tail
[0;35m

 --- --- next test --- ---
[0m

 [0;33m--- std::string test[0m
[0;32m#print values: [0mSize: 8
[0;32m|[0mHead: a | d :Back
[0;32m \[0mTail -> a -> A -> B -> b -> c -> C -> D -> d -> Tail
 --- sort
[0;32m \[0mTail -> A -> B -> C -> D -> a -> b -> c -> d -> Tail
 --- sort(Compare comp)
[0;32m \[0mTail -> A -> a -> B -> b -> C -> c -> D -> d -> Tail

 [0;33m--- std::string test_copy[0m
[0;32m#print values: [0mSize: 3
[0;32m|[0mHead: one | Three :Back
[0;32m \[0mTail -> one -> two -> Three -> Tail
 --- sort
[0;32m \[0mTail -> Three -> one -> two -> Tail
 --- sort(Compare comp)
[0;32m \[0mTail -> one -> Three -> two -> Tail

 [0;33m
---| operations_tests |---[0m

 [0;33m--- splice[0m
[0;32m#print values: [0mSize: 4
[0;32m|[0mHead: 1 | 4 :Back
[0;32m \[0mTail -> 1 -> 2 -> 3 -> 4 -> Tail
[0;32m#print values: [0mSize: 3
[0;32m|[0mHead: 10 | 30 :Back
[0;32m \[0mTail -> 10 -> 20 -> 30 -> Tail
[0;34mtest.splice(it, test_copy):[0m
[0;32m#print values: [0mSize: 7
[0;32m|[0mHead: 1 | 4 :Back
[0;32m \[0mTail -> 1 -> 10 -> 20 -> 30 -> 2 -> 3 -> 4 -> Tail
[0;32m#print values: [0mSize: 0
[0;32m|[0mHead: 0 | 0 :Back
[0;32m \[0mTail -> Tail
[0;34mtest.splice(it, test_copy):[0m
[0;32m#print values: [0mSize: 6
[0;32m|[0mHead: 1 | 4 :Back
[0;32m \[0mTail -> 1 -> 10 -> 20 -> 30 -> 3 -> 4 -> Tail
[0;32m#print values: [0mSize: 1
[0;32m|[0mHead: 2 | 2 :Back
[0;32m \[0mTail -> 2 -> Tail
[0;34mtest.splice(test.begin(), test, it, test.end()):[0m
[0;32m#print values: [0mSize: 6
[0;32m|[0mHead: 30 | 20 :Back
[0;32m \[0mTail -> 30 -> 3 -> 4 -> 1 -> 10 -> 20 -> Tail

 [0;33m--- 'remove(21)'[0m
[0;32m#print values: [0mSize: 8
[0;32m|[0mHead: 21 | 21 :Back
[0;32m \[0mTail -> 21 -> 5 -> 21 -> 31 -> 21 -> 138 -> 1 -> 21 -> Tail
[0;32m#print values: [0mSize: 4
[0;32m|[0mHead: 5 | 1 :Back
[0;32m \[0mTail -> 5 -> 31 -> 138 -> 1 -> Tail

 [0;33m--- remove_if[0m
[0;32m#print values: [0mSize: 8
[0;32m|[0mHead: 15 | 1 :Back
[0;32m \[0mTail -> 15 -> 36 -> 7 -> 17 -> 20 -> 39 -> 4 -> 1 -> Tail
[0;32m#print values: [0mSize: 5
[0;32m|[0mHead: 15 | 39 :Back
[0;32m \[0mTail -> 15 -> 36 -> 17 -> 20 -> 39 -> Tail
[0;32m#print values: [0mSize: 2
[0;32m|[0mHead: 36 | 20 :Back
[0;32m \[0mTail -> 36 -> 20 -> Tail

 [0;33m--- unique[0m
[0;32m#print values: [0mSize: 10
[0;32m|[0mHead: 12.15 | 72.25 :Back
[0;32m \[0mTail -> 12.15 -> 2.72 -> 73 -> 12.77 -> 3.14 -> 12.77 -> 73.35 -> 72.25 -> 15.3 -> 72.25 -> Tail
[0;32m#print values: [0mSize: 10
[0;32m|[0mHead: 12.15 | 72.25 :Back
[0;32m \[0mTail -> 12.15 -> 2.72 -> 73 -> 12.77 -> 3.14 -> 12.77 -> 73.35 -> 72.25 -> 15.3 -> 72.25 -> Tail

[0;34morig: [0m[0;32m \[0mTail -> 2.72 -> 3.14 -> 12.15 -> 12.77 -> 12.77 -> 15.3 -> 72.25 -> 72.25 -> 73 -> 73.35 -> Tail
[0;34mtest: [0m[0;32m \[0mTail -> 2.72 -> 3.14 -> 12.15 -> 12.77 -> 12.77 -> 15.3 -> 72.25 -> 72.25 -> 73 -> 73.35 -> Tail

[0;34morig: [0m[0;32m \[0mTail -> 2.72 -> 3.14 -> 12.15 -> 12.77 -> 15.3 -> 72.25 -> 73 -> 73.35 -> Tail
[0;34mtest: [0m[0;32m \[0mTail -> 2.72 -> 3.14 -> 12.15 -> 12.77 -> 15.3 -> 72.25 -> 73 -> 73.35 -> Tail

[0;34morig: [0m[0;32m \[0mTail -> 2.72 -> 3.14 -> 12.15 -> 15.3 -> 72.25 -> 73 -> Tail
[0;34mtest: [0m[0;32m \[0mTail -> 2.72 -> 3.14 -> 12.15 -> 15.3 -> 72.25 -> 73 -> Tail

[0;34morig: [0m[0;32m \[0mTail -> 2.72 -> 12.15 -> 72.25 -> Tail
[0;34mtest: [0m[0;32m \[0mTail -> 2.72 -> 12.15 -> 72.25 -> Tail


 [0;33m--- merge[0m
[0;34mfirst : [0m[0;32m \[0mTail -> 2 -> 2.2 -> 3.1 -> Tail
[0;34mf_my  : [0m[0;32m \[0mTail -> 2 -> 2.2 -> 3.1 -> Tail
[0;34msecond: [0m[0;32m \[0mTail -> 1.4 -> 3.7 -> 7.1 -> Tail
[0;34ms_my  : [0m[0;32m \[0mTail -> 1.4 -> 3.7 -> 7.1 -> Tail

[0;34mfirst : [0m[0;32m \[0mTail -> 1.4 -> 2 -> 2.2 -> 3.1 -> 3.7 -> 7.1 -> Tail
[0;34mf_my  : [0m[0;32m \[0mTail -> 1.4 -> 3.7 -> 7.1 -> 2 -> 2.2 -> 3.1 -> Tail
[0;34msecond: [0m[0;32m \[0mTail -> Tail
[0;34ms_my  : [0m[0;32m \[0mTail -> Tail

[0;34mfirst : [0m[0;32m \[0mTail -> 1.4 -> 2 -> 2.2 -> 2.1 -> 3.1 -> 3.7 -> 7.1 -> Tail
[0;34mf_my  : [0m[0;32m \[0mTail -> 1.4 -> 2.1 -> 3.7 -> 7.1 -> 2 -> 2.2 -> 3.1 -> Tail
[0;34msecond: [0m[0;32m \[0mTail -> Tail
[0;34ms_my  : [0m[0;32m \[0mTail -> Tail

 [0;33m--- sort[0m
[0;32m#print values: [0mSize: 8
[0;32m|[0mHead: 21 | 0 :Back
[0;32m \[0mTail -> 21 -> 5 -> 31 -> 138 -> 1 -> 21 -> 0 -> 0 -> Tail
[0;32m#print values: [0mSize: 8
[0;32m|[0mHead: 0 | 138 :Back
[0;32m \[0mTail -> 0 -> 0 -> 1 -> 5 -> 21 -> 21 -> 31 -> 138 -> Tail

 [0;33m--- reverse[0m
[0;32m#print values: [0mSize: 9
[0;32m|[0mHead: 1 | 9 :Back
[0;32m \[0mTail -> 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7 -> 8 -> 9 -> Tail
[0;32m#print values: [0mSize: 9
[0;32m|[0mHead: 9 | 1 :Back
[0;32m \[0mTail -> 9 -> 8 -> 7 -> 6 -> 5 -> 4 -> 3 -> 2 -> 1 -> Tail

 [0;33m
---| non_member_function_overloads| ---[0m

 [0;33m--- relational operators[0m
a==b
a and b are equal
a and b are equal

b!=c
b and c are not equal
b and c are not equal

b<c
b is less than c
b is less than c

c>b
c is greater than b
c is greater than b

a<=b
a is less than or equal to b
a is less than or equal to b

a>=b
a is greater than or equal to b
a is greater than or equal to b


 [0;33m--- swap[0m
[0;34mfoo : [0m[0;32m \[0mTail -> 200 -> 200 -> 200 -> 200 -> 200 -> Tail
[0;34mf_my: [0m[0;32m \[0mTail -> 200 -> 200 -> 200 -> 200 -> 200 -> Tail
[0;34mbar : [0m[0;32m \[0mTail -> 100 -> 100 -> 100 -> Tail
[0;34mb_my: [0m[0;32m \[0mTail -> 100 -> 100 -> 100 -> Tail

 [0;35m
   ---| vector testing |---[0m


 [0;33m
---| vector base tests | ---[0m

 [0;33m-- push_back[0m
[0;34mstd:[0m
[0;32m#[0m len - 1 | capacity - 1 
[0;32m#[0m len - 2 | capacity - 2 
[0;32m#[0m len - 3 | capacity - 4 
[0;32m#[0m len - 4 | capacity - 4 
[0;32m#[0m len - 5 | capacity - 8 
[0;32m#[0m len - 6 | capacity - 8 
[0;32m\[0mFirst -> | 42 | 21 | 0 | 1 | 2 | 3 | <- Last
[0;34m
ft:[0m
[0;32m#[0m len - 1 | capacity - 1 
[0;32m#[0m len - 2 | capacity - 2 
[0;32m#[0m len - 3 | capacity - 4 
[0;32m#[0m len - 4 | capacity - 4 
[0;32m#[0m len - 5 | capacity - 8 
[0;32m#[0m len - 6 | capacity - 8 
[0;32m\[0mFirst -> | 42 | 21 | 0 | 1 | 2 | 3 | <- Last

 [0;33m-- operator* and iterator++[0m
[0;34mstd:[0m
[0;32m#[0m len - 6 | capacity - 8 [0;32m\[0mFirst -> | 42 | 21 | 0 | 1 | 2 | 3 | <- Last
[0;34mft:[0m
[0;32m#[0m len - 6 | capacity - 8 [0;32m\[0mFirst -> | 42 | 21 | 0 | 1 | 2 | 3 | <- Last

 [0;33m-- vector in vector[0m
[0;34mstd:[0m
[0;32m#[0m len - 1 | capacity - 1 [0;32m\[0mFirst -> | 42 | 21 | 0 | 1 | 2 | 3 | <- Last
[0;34mft:[0m
[0;32m#[0m len - 0 | capacity - 0 
 [0;33m
-- pop_back[0m
[0;34mstd: [0m[0;32m#[0m len - 6 | capacity - 8 [0;32m\[0mFirst -> | 42 | 21 | 0 | 1 | 2 | 3 | <- Last
[0;34mft : [0m[0;32m#[0m len - 6 | capacity - 8 [0;32m\[0mFirst -> | 42 | 21 | 0 | 1 | 2 | 3 | <- Last
[0;34m3 pop_back:[0m
[0;34mstd: [0m[0;32m#[0m len - 3 | capacity - 8 [0;32m\[0mFirst -> | 42 | 21 | 0 | <- Last
[0;34mft : [0m[0;32m#[0m len - 3 | capacity - 8 [0;32m\[0mFirst -> | 42 | 21 | 0 | <- Last
[0;34m3 pop_back again:[0m
[0;34mstd: [0m[0;32m#[0m len - 0 | capacity - 8 [0;32m\[0mFirst -> | <- Last
[0;34mft : [0m[0;32m#[0m len - 0 | capacity - 8 [0;32m\[0mFirst -> | <- Last

 [0;33m
-- constructing vectors[0m
[0;34m- ft:[0m
[0;34m1) empty vector of ints    : [0m[0;32m#[0m len - 0 | capacity - 0 [0;32m\[0mFirst -> | <- Last
[0;34m2) four ints with value 100: [0m[0;32m#[0m len - 4 | capacity - 4 [0;32m\[0mFirst -> | 100 | 100 | 100 | 100 | <- Last
[0;34m3) iterating through second: [0m[0;32m#[0m len - 4 | capacity - 4 [0;32m\[0mFirst -> | 100 | 100 | 100 | 100 | <- Last
[0;34m4) a copy of third         : [0m[0;32m#[0m len - 4 | capacity - 4 [0;32m\[0mFirst -> | 100 | 100 | 100 | 100 | <- Last
[0;34m5) from array {16,2,77,29} : [0m[0;32m#[0m len - 4 | capacity - 4 [0;32m\[0mFirst -> | 16 | 2 | 77 | 29 | <- Last

[0;34m- std:[0m
[0;34m1) empty vector of ints    : [0m[0;32m#[0m len - 0 | capacity - 0 [0;32m\[0mFirst -> | <- Last
[0;34m2) four ints with value 100: [0m[0;32m#[0m len - 4 | capacity - 4 [0;32m\[0mFirst -> | 100 | 100 | 100 | 100 | <- Last
[0;34m3) iterating through second: [0m[0;32m#[0m len - 4 | capacity - 4 [0;32m\[0mFirst -> | 100 | 100 | 100 | 100 | <- Last
[0;34m4) a copy of third         : [0m[0;32m#[0m len - 4 | capacity - 4 [0;32m\[0mFirst -> | 100 | 100 | 100 | 100 | <- Last
[0;34m5) from array {16,2,77,29} : [0m[0;32m#[0m len - 4 | capacity - 4 [0;32m\[0mFirst -> | 16 | 2 | 77 | 29 | <- Last

 [0;33m
-- operator= / Assign content[0m
[0;34m- create first(3,0):[0m
[0;34mstd: [0m[0;32m#[0m len - 3 | capacity - 3 [0;32m\[0mFirst -> | 0 | 0 | 0 | <- Last
[0;34mft : [0m[0;32m#[0m len - 3 | capacity - 3 [0;32m\[0mFirst -> | 0 | 0 | 0 | <- Last
[0;34m- create second(5,0):[0m
[0;34mstd: [0m[0;32m#[0m len - 5 | capacity - 5 [0;32m\[0mFirst -> | 0 | 0 | 0 | 0 | 0 | <- Last
[0;34mft : [0m[0;32m#[0m len - 5 | capacity - 5 [0;32m\[0mFirst -> | 0 | 0 | 0 | 0 | 0 | <- Last
[0;34m- second = first:[0m
[0;34mstd: [0m[0;32m#[0m len - 3 | capacity - 5 [0;32m\[0mFirst -> | 0 | 0 | 0 | <- Last
[0;34mft : [0m[0;32m#[0m len - 3 | capacity - 5 [0;32m\[0mFirst -> | 0 | 0 | 0 | <- Last
[0;34m- first = ft::vector<int>():[0m
[0;34mstd: [0m[0;32m#[0m len - 0 | capacity - 3 [0;32m\[0mFirst -> | <- Last
[0;34mft : [0m[0;32m#[0m len - 0 | capacity - 3 [0;32m\[0mFirst -> | <- Last
[0;34m- add in second / first = second:[0m
[0;34mstd: [0m[0;32m#[0m len - 5 | capacity - 5 [0;32m\[0mFirst -> | 0 | 0 | 0 | 21 | 42 | <- Last
[0;34mft : [0m[0;32m#[0m len - 5 | capacity - 5 [0;32m\[0mFirst -> | 0 | 0 | 0 | 21 | 42 | <- Last

 [0;33m
---| iterators_vector | ---[0m
[0;33m
-- begin[0m
[0;34mstd: [0m 1 2 3 4 5
[0;34mft : [0m 1 2 3 4 5
[0;33m
-- end[0m
[0;34mstd: [0m 1 2 3 4 5
[0;34mft : [0m 1 2 3 4 5
[0;33m
-- rbegin[0m
[0;34mstd: [0m 5 4 3 2 1
[0;34mft : [0m 5 4 3 2 1
[0;33m
-- rend[0m
[0;34mstd: [0m 5 4 3 2 1
[0;34mft : [0m 5 4 3 2 1

 [0;33m
---| capacity_vector | ---[0m
[0;32m#[0m len - 9 | capacity - 16 [0;32m\[0mFirst -> | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | <- Last
[0;32m#[0m len - 9 | capacity - 16 [0;32m\[0mFirst -> | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | <- Last
[0;33m
-- size[0m
[0;34mstd: [0m9
[0;34mft : [0m9
[0;33m
-- max.size()[0m
[0;34mstd: [0mmax_size - 4611686018427387903
[0;34mft : [0mmax_size - 4611686018427387903
[0;33m
-- resize()[0m
[0;34mstd: [0m[0;32m#[0m len - 9 | capacity - 16 [0;32m\[0mFirst -> | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | <- Last
[0;34mft : [0m[0;32m#[0m len - 9 | capacity - 16 [0;32m\[0mFirst -> | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | <- Last
[0;34m- resize(5):[0m
[0;34mstd: [0m[0;32m#[0m len - 5 | capacity - 16 [0;32m\[0mFirst -> | 1 | 2 | 3 | 4 | 5 | <- Last
[0;34mft : [0m[0;32m#[0m len - 5 | capacity - 16 [0;32m\[0mFirst -> | 1 | 2 | 3 | 4 | 5 | <- Last
[0;34m- resize(8,100):[0m
[0;34mstd: [0m[0;32m#[0m len - 8 | capacity - 16 [0;32m\[0mFirst -> | 1 | 2 | 3 | 4 | 5 | 100 | 100 | 100 | <- Last
[0;34mft : [0m[0;32m#[0m len - 8 | capacity - 16 [0;32m\[0mFirst -> | 1 | 2 | 3 | 4 | 5 | 100 | 100 | 100 | <- Last
[0;34m- resize(12):[0m
[0;34mstd: [0m[0;32m#[0m len - 12 | capacity - 16 [0;32m\[0mFirst -> | 1 | 2 | 3 | 4 | 5 | 100 | 100 | 100 | 0 | 0 | 0 | 0 | <- Last
[0;34mft : [0m[0;32m#[0m len - 12 | capacity - 16 [0;32m\[0mFirst -> | 1 | 2 | 3 | 4 | 5 | 100 | 100 | 100 | 0 | 0 | 0 | 0 | <- Last
[0;33m
-- capacity[0m
[0;34mstd: [0m16
[0;34mft : [0m16
[0;33m
-- empty vector[0m
[0;34mstd: [0m0
[0;34mft : [0m0
[0;34m
- clear():[0m
[0;34mstd: [0m1
[0;34mft : [0m1
[0;33m
-- reserve[0m
[0;34mstd:[0m
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128

making bar grow:
capacity changed: 100
[0;34m
ft:[0m
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128

making bar grow:
capacity changed: 100

 [0;33m
---| element_access_vector | ---[0m
[0;33m
-- operator[][0m
[0;34mstd: [0mmyvector contains: 9 8 7 6 5 4 3 2 1 0
[0;34mft : [0mmyvector contains: 9 8 7 6 5 4 3 2 1 0
[0;33m
-- at[0m
[0;34mstd: [0mmyvector contains: 0 1 2 3 4 5 6 7 8 9
[0;34mft : [0mmyvector contains: 0 1 2 3 4 5 6 7 8 9
[0;33m
-- front[0m
[0;34mstd: [0mmyvector.front() is now 62
[0;34mft : [0mmyvector.front() is now 62
[0;33m
-- back[0m
[0;34mstd: [0mmyvector contains: 10 9 8 7 6 5 4 3 2 1 0
[0;34mft : [0mmyvector contains: 10 9 8 7 6 5 4 3 2 1 0

 [0;33m
---| modifiers_vector | ---[0m
[0;33m
-- assign[0m
[0;34mstd: [0m[0;32m#[0m len - 7 | capacity - 7 [0;32m\[0mFirst -> | 100 | 100 | 100 | 100 | 100 | 100 | 100 | <- Last
[0;34mft : [0m[0;32m#[0m len - 7 | capacity - 7 [0;32m\[0mFirst -> | 100 | 100 | 100 | 100 | 100 | 100 | 100 | <- Last

[0;34mstd: [0m[0;32m#[0m len - 5 | capacity - 5 [0;32m\[0mFirst -> | 100 | 100 | 100 | 100 | 100 | <- Last
[0;34mft : [0m[0;32m#[0m len - 5 | capacity - 5 [0;32m\[0mFirst -> | 100 | 100 | 100 | 100 | 100 | <- Last

[0;34mstd: [0m[0;32m#[0m len - 3 | capacity - 3 [0;32m\[0mFirst -> | 1776 | 7 | 4 | <- Last
[0;34mft : [0m[0;32m#[0m len - 3 | capacity - 3 [0;32m\[0mFirst -> | 1776 | 7 | 4 | <- Last
[0;33m
-- pop_back[0m
[0;34mstd:[0m
[0;32m#[0m len - 3 | capacity - 4 [0;32m\[0mFirst -> | 100 | 200 | 300 | <- Last
The elements of myvector add up to 600
[0;32m#[0m len - 0 | capacity - 4 [0;32m\[0mFirst -> | <- Last
[0;34mft:[0m
[0;32m#[0m len - 3 | capacity - 4 [0;32m\[0mFirst -> | 100 | 200 | 300 | <- Last
The elements of myvector add up to 600
[0;32m#[0m len - 0 | capacity - 4 [0;32m\[0mFirst -> | <- Last
[0;33m
-- insert[0m
[0;34mstd: [0m[0;32m#[0m len - 3 | capacity - 3 [0;32m\[0mFirst -> | 100 | 100 | 100 | <- Last
[0;34mft : [0m[0;32m#[0m len - 3 | capacity - 3 [0;32m\[0mFirst -> | 100 | 100 | 100 | <- Last

[0;34mstd: [0m[0;32m#[0m len - 4 | capacity - 6 [0;32m\[0mFirst -> | 200 | 100 | 100 | 100 | <- Last
[0;34mft : [0m[0;32m#[0m len - 4 | capacity - 6 [0;32m\[0mFirst -> | 200 | 100 | 100 | 100 | <- Last

[0;34mstd: [0m[0;32m#[0m len - 6 | capacity - 6 [0;32m\[0mFirst -> | 300 | 300 | 200 | 100 | 100 | 100 | <- Last
[0;34mft : [0m[0;32m#[0m len - 6 | capacity - 6 [0;32m\[0mFirst -> | 300 | 300 | 200 | 100 | 100 | 100 | <- Last

[0;34mstd: [0m[0;32m#[0m len - 6 | capacity - 6 [0;32m\[0mFirst -> | 300 | 300 | 200 | 100 | 100 | 100 | <- Last
[0;34mft : [0m[0;32m#[0m len - 6 | capacity - 6 [0;32m\[0mFirst -> | 300 | 300 | 200 | 100 | 100 | 100 | <- Last

[0;34mstd: [0m[0;32m#[0m len - 8 | capacity - 12 [0;32m\[0mFirst -> | 300 | 300 | 400 | 400 | 200 | 100 | 100 | 100 | <- Last
[0;34mft : [0m[0;32m#[0m len - 8 | capacity - 12 [0;32m\[0mFirst -> | 300 | 300 | 400 | 400 | 200 | 100 | 100 | 100 | <- Last

[0;34mstd: [0m[0;32m#[0m len - 11 | capacity - 12 [0;32m\[0mFirst -> | 501 | 502 | 503 | 300 | 300 | 400 | 400 | 200 | 100 | 100 | 100 | <- Last
[0;34mft : [0m[0;32m#[0m len - 11 | capacity - 12 [0;32m\[0mFirst -> | 501 | 502 | 503 | 300 | 300 | 400 | 400 | 200 | 100 | 100 | 100 | <- Last

[0;33m
-- erase[0m
[0;34mstd: [0m[0;32m#[0m len - 10 | capacity - 16 [0;32m\[0mFirst -> | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | <- Last
[0;34mft : [0m[0;32m#[0m len - 10 | capacity - 16 [0;32m\[0mFirst -> | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | <- Last

[0;34mstd: [0m[0;32m#[0m len - 9 | capacity - 16 [0;32m\[0mFirst -> | 1 | 2 | 3 | 4 | 5 | 7 | 8 | 9 | 10 | <- Last
[0;34mft : [0m[0;32m#[0m len - 9 | capacity - 16 [0;32m\[0mFirst -> | 1 | 2 | 3 | 4 | 5 | 7 | 8 | 9 | 10 | <- Last

[0;34mstd: [0m[0;32m#[0m len - 6 | capacity - 16 [0;32m\[0mFirst -> | 4 | 5 | 7 | 8 | 9 | 10 | <- Last
[0;34mft : [0m[0;32m#[0m len - 6 | capacity - 16 [0;32m\[0mFirst -> | 4 | 5 | 7 | 8 | 9 | 10 | <- Last

[0;34mstd: [0m[0;32m#[0m len - 4 | capacity - 16 [0;32m\[0mFirst -> | 4 | 5 | 9 | 10 | <- Last
[0;34mft : [0m[0;32m#[0m len - 4 | capacity - 16 [0;32m\[0mFirst -> | 4 | 5 | 9 | 10 | <- Last

[0;33m
-- swap[0m
[0;34mstd:[0m
[0;32m#[0m len - 3 | capacity - 3 [0;32m\[0mFirst -> | 100 | 100 | 100 | <- Last
[0;32m#[0m len - 5 | capacity - 5 [0;32m\[0mFirst -> | 200 | 200 | 200 | 200 | 200 | <- Last
[0;34mswap:[0m
[0;32m#[0m len - 5 | capacity - 5 [0;32m\[0mFirst -> | 200 | 200 | 200 | 200 | 200 | <- Last
[0;32m#[0m len - 3 | capacity - 3 [0;32m\[0mFirst -> | 100 | 100 | 100 | <- Last

[0;34mft :[0m
[0;32m#[0m len - 3 | capacity - 3 [0;32m\[0mFirst -> | 100 | 100 | 100 | <- Last
[0;32m#[0m len - 5 | capacity - 5 [0;32m\[0mFirst -> | 200 | 200 | 200 | 200 | 200 | <- Last
[0;34mswap:[0m
[0;32m#[0m len - 5 | capacity - 5 [0;32m\[0mFirst -> | 200 | 200 | 200 | 200 | 200 | <- Last
[0;32m#[0m len - 3 | capacity - 5 [0;32m\[0mFirst -> | 100 | 100 | 100 | <- Last
[0;33m
-- clear[0m
[0;34mstd:[0m
myvector contains: 100 200 300
myvector contains: 1101 2202
[0;34mft :[0m
myvector contains: 100 200 300
myvector contains: 1101 2202

 [0;33m
---| non_member_function_overloads_vector | ---[0m
[0;33m
-- relational operators[0m
[0;34mstd:[0m
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
[0;34mft :[0m
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
[0;33m
-- swap[0m
foo contains: 200 200 200 200 200
bar contains: 100 100 100

 [0;35m
   ---| queue testing |---[0m


 [0;33m
---| queue base tests | ---[0m
[0;33m
-- constructing queues[0m
[0;34mstd:[0m
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
[0;34mft :[0m
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
[0;33m
-- empty[0m
[0;34mstd:[0m
total: 55
[0;34mft :[0m
total: 55
[0;33m
-- size[0m
[0;34mstd:[0m
0. size: 0
1. size: 5
2. size: 4
[0;34mft :[0m
0. size: 0
1. size: 5
2. size: 4
[0;33m
-- front[0m
[0;34mstd:[0m
myqueue.front() is now 61
[0;34mft :[0m
myqueue.front() is now 61
[0;33m
-- back[0m
[0;34mstd:[0m
myqueue.back() is now 63
[0;34mft :[0m
myqueue.back() is now 63
[0;33m
-- push/pop[0m
[0;34mstd:[0m
 4040 42 21 0 -4040
[0;34mft :[0m
 4040 42 21 0 -4040

 [0;33m
---| non member function overloads queue | ---[0m
[0;33m
-- swap[0m
[0;34mstd:[0m
size of foo: 2
size of bar: 3
[0;34mft :[0m
size of foo: 2
size of bar: 3
[0;33m
-- relational operators[0m
[0;34mstd:[0m
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
[0;34mft :[0m
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar

 [0;35m
   ---| stack testing |---[0m


 [0;33m
---| stack base tests | ---[0m
[0;33m
-- constructing stack[0m
[0;34mstd:[0m
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
[0;34mft :[0m
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
[0;33m
-- stack::empty[0m
[0;34mstd:[0m
total: 55
[0;34mft :[0m
total: 55
[0;33m
-- stack::size[0m
[0;34mstd:[0m
0. size: 0
1. size: 5
2. size: 4
[0;34mft :[0m
0. size: 0
1. size: 5
2. size: 4
[0;33m
-- stack::top[0m
[0;34mstd:[0m
mystack.top() is now 15
[0;34mft :[0m
mystack.top() is now 15
[0;33m
-- stack::push/pop[0m
[0;34mstd:[0m
Popping out elements... 4 3 2 1 0
[0;34mft :[0m
Popping out elements... 4 3 2 1 0

 [0;33m
---| non member function overloads stack | ---[0m
[0;33m
-- swap[0m
[0;34mstd:[0m
size of foo: 2
size of bar: 3
[0;34mft :[0m
size of foo: 2
size of bar: 3
[0;33m
-- relational operators[0m
[0;34mstd:[0m
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
[0;34mft :[0m
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar

 [0;35m
   ---| map testing |---[0m


 [0;33m
---| map base tests | ---[0m
[0;33m
-- constructing map[0m
[0;34mstd:[0m
1 :10|
2 :10|

size :0| 1| 2| 3| 4| 5|
0: 'a'/7|
1: 'b'/13|
2: 'c'/21|
3: 'd'/26|
4: 'e'/42|
---
4: 'e'/42|
3: 'd'/26|
2: 'c'/21|
1: 'b'/13|
0: 'a'/7|
[0;34mft :[0m

size :0| 1| 2| 3| 4| 5|
0: 'a'/7|
1: 'b'/13|
2: 'c'/21|
3: 'd'/26|
4: 'e'/42|
---
4: 'e'/42|
3: 'd'/26|
2: 'c'/21|
1: 'b'/13|
0: 'a'/7|

                                 a                                                              
                 x                               c                              
         x               x               b               e              
     x       x       x       x       x       x       d              

- balance -
size :0| 1| 2| 3| 4| 5|
0: 'a'/7|
1: 'b'/13|
2: 'c'/21|
3: 'd'/26|
4: 'e'/42|
---
4: 'e'/42|
3: 'd'/26|
2: 'c'/21|
1: 'b'/13|
0: 'a'/7|

                 c                              
         a               e              
     x       b       d              

----CONST ITERATORS----


                                                                 -1                                                                                                                               x                                                                                                                               x                                                                                                                               21                                                                                                                              
                                 -2                                                               x                                                               x                                                               x                                                               x                                                               x                                                               x                                                               22                                                              
                 -3                               x                               x                               x                               x                               x                               x                               x                               x                               x                               x                               x                               x                               x                               x                               23                              
         -4               x               x               x               x               x               x               x               x               x               x               x               x               x               x               x               x               x               x               x               x               x               x               x               x               x               x               x               x               x               x               24              
     -5       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       25      

 [0;35m
   ---\ End of testing /---
[0m


10 seconds to complete the test
...
5 seconds left
4 seconds left
3 seconds left
2 seconds left
1 second left

 [0;35m
 ___---/ Start testing \---___[0m


 [0;35m
   ---| list testing |---[0m


 [0;33m--- default Constructor ---
[0m
[0;32m#print values: [0mSize: 0
[0;32m|[0mHead: 0 | 0 :Back
[0;32m \[0mTail -> Tail

 [0;33m--- push_back[0m
[0;32m#print values: [0mSize: 4
[0;32m|[0mHead: 0 | 42 :Back
[0;32m \[0mTail -> 0 -> 10 -> 21 -> 42 -> Tail

 [0;33m--- pop_back[0m
[0;32m#print values: [0mSize: 2
[0;32m|[0mHead: 0 | 10 :Back
[0;32m \[0mTail -> 0 -> 10 -> Tail

 [0;33m--- push_front[0m
[0;32m#print values: [0mSize: 4
[0;32m|[0mHead: 42 | 10 :Back
[0;32m \[0mTail -> 42 -> 21 -> 0 -> 10 -> Tail

 [0;33m--- pop_front[0m
[0;32m#print values: [0mSize: 2
[0;32m|[0mHead: 0 | 10 :Back
[0;32m \[0mTail -> 0 -> 10 -> Tail

 [0;33m
 ---| iterators_tests |---[0m

 [0;33m--- origin iterator[0m
[0;34miterator                   : [0m[0;32m \[0mTail -> one -> two -> Three -> Tail
[0;34mreverse iterator           :[0m
[0;32m \[0mTail -> Three -> two -> one -> Tail
[0;34m*test.begin() = "Laka"     : [0m[0;32m \[0mTail -> Laka -> two -> Three -> Tail
[0;34m*(++test.begin()) = "Shaka": [0m[0;32m \[0mTail -> Laka -> Shaka -> Three -> Tail

 --- reverse ---
[0;34m*test.rbegin() = "BOOM"    :[0m
[0;32m \[0mTail -> BOOM -> Shaka -> Laka -> Tail

 [0;33m --- my iterator[0m
[0;34miterator                   : [0m[0;32m \[0mTail -> one -> two -> Three -> Tail
[0;34mreverse iterator           :[0m
[0;32m \[0mTail -> Three -> two -> one -> Tail
[0;34m*test.begin() = "Laka"     : [0m[0;32m \[0mTail -> Laka -> two -> Three -> Tail
[0;34m*(++test.begin()) = "Shaka": [0m[0;32m \[0mTail -> Laka -> Shaka -> Three -> Tail

 --- reverse ---
[0;34m*test.rbegin() = "BOOM"    :[0m
[0;32m \[0mTail -> BOOM -> Shaka -> Laka -> Tail

 [0;33m --- const_iterator[0m
[0;34m origin iterator :[0m
[0;32m \[0mTail -> one -> two -> Three -> Tail
[0;34m my iterator     :[0m
[0;32m \[0mTail -> one -> two -> Three -> Tail

 [0;33m --- reverse_const_iterator[0m
[0;34m origin iterator :[0m
[0;32m \[0mTail -> Three -> two -> one -> Tail
[0;34m my iterator     :[0m
[0;32m \[0mTail -> Three -> two -> one -> Tail

 [0;33m --- const_iterator 2[0m

std:
list_test --- 21 - 21
list_test --- 5 - 21

ft:
list_test --- 21 - 21
list_test --- 5 - 21

 [0;33m
 ---| capacity_tests |---[0m
[0;32m#print values: [0mSize: 6
[0;32m|[0mHead: 21 | 0 :Back
[0;32m \[0mTail -> 21 -> 42 -> 36 -> 76 -> 5 -> 0 -> Tail

 [0;33m--- empty(no emtpy)[0m
[0;32m#print values: [0mSize: 6
[0;32m|[0mHead: 21 | 0 :Back
[0;32m \[0mTail -> 21 -> 42 -> 36 -> 76 -> 5 -> 0 -> Tail
[0;32mlist is empty?[0m
--> FALSE

 [0;33m--- empty(empty)[0m
[0;32m#print values: [0mSize: 4
[0;32m|[0mHead: 42 | 5 :Back
[0;32m \[0mTail -> 42 -> 36 -> 76 -> 5 -> Tail
[0;32mlist is empty?[0m
--> FALSE

 [0;33m--- size[0m
4

 [0;33m--- max size[0m
576460752303423487

 [0;33m
 ---| element_access_tests |---[0m
[0;32m#print values: [0mSize: 6
[0;32m|[0mHead: 21 | 0 :Back
[0;32m \[0mTail -> 21 -> 42 -> 36 -> 76 -> 5 -> 0 -> Tail

 [0;33m--- front[0m
-->21

 [0;33m--- back[0m
-->0

 [0;33m
 ---| modifiers_tests |---[0m

 [0;33m--- fill Constructors[0m
 --- create new 'test(5, 21)'
[0;32m#print values: [0mSize: 5
[0;32m|[0mHead: 21 | 21 :Back
[0;32m \[0mTail -> 21 -> 21 -> 21 -> 21 -> 21 -> Tail

 [0;33m--- test_copy[0m
 --- create new 'test_copy(test)'
[0;32m#print values: [0mSize: 5
[0;32m|[0mHead: 21 | 21 :Back
[0;32m \[0mTail -> 21 -> 21 -> 21 -> 21 -> 21 -> Tail

 [0;33m--- test_operator[0m
 --- create new 'test_operator(5, 42)'
[0;32m#print values: [0mSize: 5
[0;32m|[0mHead: 42 | 42 :Back
[0;32m \[0mTail -> 42 -> 42 -> 42 -> 42 -> 42 -> Tail
 --- 'test_operator = test_copy'
[0;32m#print values: [0mSize: 5
[0;32m|[0mHead: 21 | 21 :Back
[0;32m \[0mTail -> 21 -> 21 -> 21 -> 21 -> 21 -> Tail

 [0;33m--- resize[0m
[0;32m#print values: [0mSize: 5
[0;32m|[0mHead: 21 | 21 :Back
[0;32m \[0mTail -> 21 -> 21 -> 21 -> 21 -> 21 -> Tail
 --- 'resize(2)'
[0;32m#print values: [0mSize: 2
[0;32m|[0mHead: 21 | 21 :Back
[0;32m \[0mTail -> 21 -> 21 -> Tail
 --- 'test.resize(4, 48)'
[0;32m#print values: [0mSize: 4
[0;32m|[0mHead: 21 | 48 :Back
[0;32m \[0mTail -> 21 -> 21 -> 48 -> 48 -> Tail
 --- 'test.resize(6)'
[0;32m#print values: [0mSize: 6
[0;32m|[0mHead: 21 | 0 :Back
[0;32m \[0mTail -> 21 -> 21 -> 48 -> 48 -> 0 -> 0 -> Tail

 [0;33m--- swap[0m
 --- 'test' and 'test_copy'
[0;32m#print values: [0mSize: 6
[0;32m|[0mHead: 21 | 0 :Back
[0;32m \[0mTail -> 21 -> 21 -> 48 -> 48 -> 0 -> 0 -> Tail
[0;32m#print values: [0mSize: 5
[0;32m|[0mHead: 21 | 21 :Back
[0;32m \[0mTail -> 21 -> 21 -> 21 -> 21 -> 21 -> Tail

 --- 'test.swap(test_copy)'
[0;32m#print values: [0mSize: 5
[0;32m|[0mHead: 21 | 21 :Back
[0;32m \[0mTail -> 21 -> 21 -> 21 -> 21 -> 21 -> Tail
[0;32m#print values: [0mSize: 6
[0;32m|[0mHead: 21 | 0 :Back
[0;32m \[0mTail -> 21 -> 21 -> 48 -> 48 -> 0 -> 0 -> Tail

 [0;33m--- erase[0m
[0;32m#print values: [0mSize: 0
[0;32m|[0mHead: 0 | 0 :Back
[0;32m \[0mTail -> Tail

 [0;33m--- wrong pop_back[0m
[0;32m#print values: [0mSize: 0
[0;32m|[0mHead: 0 | 0 :Back
[0;32m \[0mTail -> Tail
[0;35m

 --- --- next test --- ---
[0m

 [0;33m--- assign[0m
[0;32m#print values: [0mSize: 0
[0;32m|[0mHead: 0 | 0 :Back
[0;32m \[0mTail -> Tail
[0;34mtest_copy.assign(test.begin(),test.end()):[0m
[0;32m#print values: [0mSize: 8
[0;32m|[0mHead: 21 | 21 :Back
[0;32m \[0mTail -> 21 -> 5 -> 21 -> 31 -> 21 -> 138 -> 1 -> 21 -> Tail
[0;34mtest_copy.assign(7,100):[0m
[0;32m#print values: [0mSize: 7
[0;32m|[0mHead: 100 | 100 :Back
[0;32m \[0mTail -> 100 -> 100 -> 100 -> 100 -> 100 -> 100 -> 100 -> Tail

 [0;33m--- erase[0m
[0;32m#print values: [0mSize: 8
[0;32m|[0mHead: 21 | 21 :Back
[0;32m \[0mTail -> 21 -> 5 -> 21 -> 31 -> 21 -> 138 -> 1 -> 21 -> Tail
[0;34mtest.erase(++test.begin()):[0m
[0;32m#print values: [0mSize: 7
[0;32m|[0mHead: 21 | 21 :Back
[0;32m \[0mTail -> 21 -> 21 -> 31 -> 21 -> 138 -> 1 -> 21 -> Tail
[0;34mtest.erase(test.begin(), --test.end()):[0m
[0;32m#print values: [0mSize: 1
[0;32m|[0mHead: 21 | 21 :Back
[0;32m \[0mTail -> 21 -> Tail

 [0;33m--- insert[0m
[0;32m#print values: [0mSize: 1
[0;32m|[0mHead: 21 | 21 :Back
[0;32m \[0mTail -> 21 -> Tail
[0;34mtest.insert(test.begin(), 777):[0m
insert return: 777[0;32m#print values: [0mSize: 2
[0;32m|[0mHead: 777 | 21 :Back
[0;32m \[0mTail -> 777 -> 21 -> Tail
[0;34mtest.insert(test.begin(), 2, 44):[0m
[0;32m#print values: [0mSize: 4
[0;32m|[0mHead: 44 | 21 :Back
[0;32m \[0mTail -> 44 -> 44 -> 777 -> 21 -> Tail
[0;34mtest.insert(++test.begin(), test_copy.begin(), it):[0m
[0;32m#print values: [0mSize: 7
[0;32m|[0mHead: 44 | 21 :Back
[0;32m \[0mTail -> 44 -> 100 -> 100 -> 100 -> 44 -> 777 -> 21 -> Tail
[0;35m

 --- --- next test --- ---
[0m

 [0;33m--- std::string test[0m
[0;32m#print values: [0mSize: 8
[0;32m|[0mHead: a | d :Back
[0;32m \[0mTail -> a -> A -> B -> b -> c -> C -> D -> d -> Tail
 --- sort
[0;32m \[0mTail -> A -> B -> C -> D -> a -> b -> c -> d -> Tail
 --- sort(Compare comp)
[0;32m \[0mTail -> A -> a -> B -> b -> C -> c -> D -> d -> Tail

 [0;33m--- std::string test_copy[0m
[0;32m#print values: [0mSize: 3
[0;32m|[0mHead: one | Three :Back
[0;32m \[0mTail -> one -> two -> Three -> Tail
 --- sort
[0;32m \[0mTail -> Three -> one -> two -> Tail
 --- sort(Compare comp)
[0;32m \[0mTail -> one -> Three -> two -> Tail

 [0;33m
---| operations_tests |---[0m

 [0;33m--- splice[0m
[0;32m#print values: [0mSize: 4
[0;32m|[0mHead: 1 | 4 :Back
[0;32m \[0mTail -> 1 -> 2 -> 3 -> 4 -> Tail
[0;32m#print values: [0mSize: 3
[0;32m|[0mHead: 10 | 30 :Back
[0;32m \[0mTail -> 10 -> 20 -> 30 -> Tail
[0;34mtest.splice(it, test_copy):[0m
[0;32m#print values: [0mSize: 7
[0;32m|[0mHead: 1 | 4 :Back
[0;32m \[0mTail -> 1 -> 10 -> 20 -> 30 -> 2 -> 3 -> 4 -> Tail
[0;32m#print values: [0mSize: 0
[0;32m|[0mHead: 0 | 0 :Back
[0;32m \[0mTail -> Tail
[0;34mtest.splice(it, test_copy):[0m
[0;32m#print values: [0mSize: 6
[0;32m|[0mHead: 1 | 4 :Back
[0;32m \[0mTail -> 1 -> 10 -> 20 -> 30 -> 3 -> 4 -> Tail
[0;32m#print values: [0mSize: 1
[0;32m|[0mHead: 2 | 2 :Back
[0;32m \[0mTail -> 2 -> Tail
[0;34mtest.splice(test.begin(), test, it, test.end()):[0m
[0;32m#print values: [0mSize: 6
[0;32m|[0mHead: 30 | 20 :Back
[0;32m \[0mTail -> 30 -> 3 -> 4 -> 1 -> 10 -> 20 -> Tail

 [0;33m--- 'remove(21)'[0m
[0;32m#print values: [0mSize: 8
[0;32m|[0mHead: 21 | 21 :Back
[0;32m \[0mTail -> 21 -> 5 -> 21 -> 31 -> 21 -> 138 -> 1 -> 21 -> Tail
[0;32m#print values: [0mSize: 4
[0;32m|[0mHead: 5 | 1 :Back
[0;32m \[0mTail -> 5 -> 31 -> 138 -> 1 -> Tail

 [0;33m--- remove_if[0m
[0;32m#print values: [0mSize: 8
[0;32m|[0mHead: 15 | 1 :Back
[0;32m \[0mTail -> 15 -> 36 -> 7 -> 17 -> 20 -> 39 -> 4 -> 1 -> Tail
[0;32m#print values: [0mSize: 5
[0;32m|[0mHead: 15 | 39 :Back
[0;32m \[0mTail -> 15 -> 36 -> 17 -> 20 -> 39 -> Tail
[0;32m#print values: [0mSize: 2
[0;32m|[0mHead: 36 | 20 :Back
[0;32m \[0mTail -> 36 -> 20 -> Tail

 [0;33m--- unique[0m
[0;32m#print values: [0mSize: 10
[0;32m|[0mHead: 12.15 | 72.25 :Back
[0;32m \[0mTail -> 12.15 -> 2.72 -> 73 -> 12.77 -> 3.14 -> 12.77 -> 73.35 -> 72.25 -> 15.3 -> 72.25 -> Tail
[0;32m#print values: [0mSize: 10
[0;32m|[0mHead: 12.15 | 72.25 :Back
[0;32m \[0mTail -> 12.15 -> 2.72 -> 73 -> 12.77 -> 3.14 -> 12.77 -> 73.35 -> 72.25 -> 15.3 -> 72.25 -> Tail

[0;34morig: [0m[0;32m \[0mTail -> 2.72 -> 3.14 -> 12.15 -> 12.77 -> 12.77 -> 15.3 -> 72.25 -> 72.25 -> 73 -> 73.35 -> Tail
[0;34mtest: [0m[0;32m \[0mTail -> 2.72 -> 3.14 -> 12.15 -> 12.77 -> 12.77 -> 15.3 -> 72.25 -> 72.25 -> 73 -> 73.35 -> Tail

[0;34morig: [0m[0;32m \[0mTail -> 2.72 -> 3.14 -> 12.15 -> 12.77 -> 15.3 -> 72.25 -> 73 -> 73.35 -> Tail
[0;34mtest: [0m[0;32m \[0mTail -> 2.72 -> 3.14 -> 12.15 -> 12.77 -> 15.3 -> 72.25 -> 73 -> 73.35 -> Tail

[0;34morig: [0m[0;32m \[0mTail -> 2.72 -> 3.14 -> 12.15 -> 15.3 -> 72.25 -> 73 -> Tail
[0;34mtest: [0m[0;32m \[0mTail -> 2.72 -> 3.14 -> 12.15 -> 15.3 -> 72.25 -> 73 -> Tail

[0;34morig: [0m[0;32m \[0mTail -> 2.72 -> 12.15 -> 72.25 -> Tail
[0;34mtest: [0m[0;32m \[0mTail -> 2.72 -> 12.15 -> 72.25 -> Tail


 [0;33m--- merge[0m
[0;34mfirst : [0m[0;32m \[0mTail -> 2 -> 2.2 -> 3.1 -> Tail
[0;34mf_my  : [0m[0;32m \[0mTail -> 2 -> 2.2 -> 3.1 -> Tail
[0;34msecond: [0m[0;32m \[0mTail -> 1.4 -> 3.7 -> 7.1 -> Tail
[0;34ms_my  : [0m[0;32m \[0mTail -> 1.4 -> 3.7 -> 7.1 -> Tail

[0;34mfirst : [0m[0;32m \[0mTail -> 1.4 -> 2 -> 2.2 -> 3.1 -> 3.7 -> 7.1 -> Tail
[0;34mf_my  : [0m[0;32m \[0mTail -> 1.4 -> 3.7 -> 7.1 -> 2 -> 2.2 -> 3.1 -> Tail
[0;34msecond: [0m[0;32m \[0mTail -> Tail
[0;34ms_my  : [0m[0;32m \[0mTail -> Tail

[0;34mfirst : [0m[0;32m \[0mTail -> 1.4 -> 2 -> 2.2 -> 2.1 -> 3.1 -> 3.7 -> 7.1 -> Tail
[0;34mf_my  : [0m[0;32m \[0mTail -> 1.4 -> 2.1 -> 3.7 -> 7.1 -> 2 -> 2.2 -> 3.1 -> Tail
[0;34msecond: [0m[0;32m \[0mTail -> Tail
[0;34ms_my  : [0m[0;32m \[0mTail -> Tail

 [0;33m--- sort[0m
[0;32m#print values: [0mSize: 8
[0;32m|[0mHead: 21 | 0 :Back
[0;32m \[0mTail -> 21 -> 5 -> 31 -> 138 -> 1 -> 21 -> 0 -> 0 -> Tail
[0;32m#print values: [0mSize: 8
[0;32m|[0mHead: 0 | 138 :Back
[0;32m \[0mTail -> 0 -> 0 -> 1 -> 5 -> 21 -> 21 -> 31 -> 138 -> Tail

 [0;33m--- reverse[0m
[0;32m#print values: [0mSize: 9
[0;32m|[0mHead: 1 | 9 :Back
[0;32m \[0mTail -> 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7 -> 8 -> 9 -> Tail
[0;32m#print values: [0mSize: 9
[0;32m|[0mHead: 9 | 1 :Back
[0;32m \[0mTail -> 9 -> 8 -> 7 -> 6 -> 5 -> 4 -> 3 -> 2 -> 1 -> Tail

 [0;33m
---| non_member_function_overloads| ---[0m

 [0;33m--- relational operators[0m
a==b
a and b are equal
a and b are equal

b!=c
b and c are not equal
b and c are not equal

b<c
b is less than c
b is less than c

c>b
c is greater than b
c is greater than b

a<=b
a is less than or equal to b
a is less than or equal to b

a>=b
a is greater than or equal to b
a is greater than or equal to b


 [0;33m--- swap[0m
[0;34mfoo : [0m[0;32m \[0mTail -> 200 -> 200 -> 200 -> 200 -> 200 -> Tail
[0;34mf_my: [0m[0;32m \[0mTail -> 200 -> 200 -> 200 -> 200 -> 200 -> Tail
[0;34mbar : [0m[0;32m \[0mTail -> 100 -> 100 -> 100 -> Tail
[0;34mb_my: [0m[0;32m \[0mTail -> 100 -> 100 -> 100 -> Tail

 [0;35m
   ---| vector testing |---[0m


 [0;33m
---| vector base tests | ---[0m

 [0;33m-- push_back[0m
[0;34mstd:[0m
[0;32m#[0m len - 1 | capacity - 1 
[0;32m#[0m len - 2 | capacity - 2 
[0;32m#[0m len - 3 | capacity - 4 
[0;32m#[0m len - 4 | capacity - 4 
[0;32m#[0m len - 5 | capacity - 8 
[0;32m#[0m len - 6 | capacity - 8 
[0;32m\[0mFirst -> | 42 | 21 | 0 | 1 | 2 | 3 | <- Last
[0;34m
ft:[0m
[0;32m#[0m len - 1 | capacity - 1 
[0;32m#[0m len - 2 | capacity - 2 
[0;32m#[0m len - 3 | capacity - 4 
[0;32m#[0m len - 4 | capacity - 4 
[0;32m#[0m len - 5 | capacity - 8 
[0;32m#[0m len - 6 | capacity - 8 
[0;32m\[0mFirst -> | 42 | 21 | 0 | 1 | 2 | 3 | <- Last

 [0;33m-- operator* and iterator++[0m
[0;34mstd:[0m
[0;32m#[0m len - 6 | capacity - 8 [0;32m\[0mFirst -> | 42 | 21 | 0 | 1 | 2 | 3 | <- Last
[0;34mft:[0m
[0;32m#[0m len - 6 | capacity - 8 [0;32m\[0mFirst -> | 42 | 21 | 0 | 1 | 2 | 3 | <- Last

 [0;33m-- vector in vector[0m
[0;34mstd:[0m
[0;32m#[0m len - 1 | capacity - 1 [0;32m\[0mFirst -> | 42 | 21 | 0 | 1 | 2 | 3 | <- Last
[0;34mft:[0m
[0;32m#[0m len - 0 | capacity - 0 
 [0;33m
-- pop_back[0m
[0;34mstd: [0m[0;32m#[0m len - 6 | capacity - 8 [0;32m\[0mFirst -> | 42 | 21 | 0 | 1 | 2 | 3 | <- Last
[0;34mft : [0m[0;32m#[0m len - 6 | capacity - 8 [0;32m\[0mFirst -> | 42 | 21 | 0 | 1 | 2 | 3 | <- Last
[0;34m3 pop_back:[0m
[0;34mstd: [0m[0;32m#[0m len - 3 | capacity - 8 [0;32m\[0mFirst -> | 42 | 21 | 0 | <- Last
[0;34mft : [0m[0;32m#[0m len - 3 | capacity - 8 [0;32m\[0mFirst -> | 42 | 21 | 0 | <- Last
[0;34m3 pop_back again:[0m
[0;34mstd: [0m[0;32m#[0m len - 0 | capacity - 8 [0;32m\[0mFirst -> | <- Last
[0;34mft : [0m[0;32m#[0m len - 0 | capacity - 8 [0;32m\[0mFirst -> | <- Last

 [0;33m
-- constructing vectors[0m
[0;34m- ft:[0m
[0;34m1) empty vector of ints    : [0m[0;32m#[0m len - 0 | capacity - 0 [0;32m\[0mFirst -> | <- Last
[0;34m2) four ints with value 100: [0m[0;32m#[0m len - 4 | capacity - 4 [0;32m\[0mFirst -> | 100 | 100 | 100 | 100 | <- Last
[0;34m3) iterating through second: [0m[0;32m#[0m len - 4 | capacity - 4 [0;32m\[0mFirst -> | 100 | 100 | 100 | 100 | <- Last
[0;34m4) a copy of third         : [0m[0;32m#[0m len - 4 | capacity - 4 [0;32m\[0mFirst -> | 100 | 100 | 100 | 100 | <- Last
[0;34m5) from array {16,2,77,29} : [0m[0;32m#[0m len - 4 | capacity - 4 [0;32m\[0mFirst -> | 16 | 2 | 77 | 29 | <- Last

[0;34m- std:[0m
[0;34m1) empty vector of ints    : [0m[0;32m#[0m len - 0 | capacity - 0 [0;32m\[0mFirst -> | <- Last
[0;34m2) four ints with value 100: [0m[0;32m#[0m len - 4 | capacity - 4 [0;32m\[0mFirst -> | 100 | 100 | 100 | 100 | <- Last
[0;34m3) iterating through second: [0m[0;32m#[0m len - 4 | capacity - 4 [0;32m\[0mFirst -> | 100 | 100 | 100 | 100 | <- Last
[0;34m4) a copy of third         : [0m[0;32m#[0m len - 4 | capacity - 4 [0;32m\[0mFirst -> | 100 | 100 | 100 | 100 | <- Last
[0;34m5) from array {16,2,77,29} : [0m[0;32m#[0m len - 4 | capacity - 4 [0;32m\[0mFirst -> | 16 | 2 | 77 | 29 | <- Last

 [0;33m
-- operator= / Assign content[0m
[0;34m- create first(3,0):[0m
[0;34mstd: [0m[0;32m#[0m len - 3 | capacity - 3 [0;32m\[0mFirst -> | 0 | 0 | 0 | <- Last
[0;34mft : [0m[0;32m#[0m len - 3 | capacity - 3 [0;32m\[0mFirst -> | 0 | 0 | 0 | <- Last
[0;34m- create second(5,0):[0m
[0;34mstd: [0m[0;32m#[0m len - 5 | capacity - 5 [0;32m\[0mFirst -> | 0 | 0 | 0 | 0 | 0 | <- Last
[0;34mft : [0m[0;32m#[0m len - 5 | capacity - 5 [0;32m\[0mFirst -> | 0 | 0 | 0 | 0 | 0 | <- Last
[0;34m- second = first:[0m
[0;34mstd: [0m[0;32m#[0m len - 3 | capacity - 5 [0;32m\[0mFirst -> | 0 | 0 | 0 | <- Last
[0;34mft : [0m[0;32m#[0m len - 3 | capacity - 5 [0;32m\[0mFirst -> | 0 | 0 | 0 | <- Last
[0;34m- first = ft::vector<int>():[0m
[0;34mstd: [0m[0;32m#[0m len - 0 | capacity - 3 [0;32m\[0mFirst -> | <- Last
[0;34mft : [0m[0;32m#[0m len - 0 | capacity - 3 [0;32m\[0mFirst -> | <- Last
[0;34m- add in second / first = second:[0m
[0;34mstd: [0m[0;32m#[0m len - 5 | capacity - 5 [0;32m\[0mFirst -> | 0 | 0 | 0 | 21 | 42 | <- Last
[0;34mft : [0m[0;32m#[0m len - 5 | capacity - 5 [0;32m\[0mFirst -> | 0 | 0 | 0 | 21 | 42 | <- Last

 [0;33m
---| iterators_vector | ---[0m
[0;33m
-- begin[0m
[0;34mstd: [0m 1 2 3 4 5
[0;34mft : [0m 1 2 3 4 5
[0;33m
-- end[0m
[0;34mstd: [0m 1 2 3 4 5
[0;34mft : [0m 1 2 3 4 5
[0;33m
-- rbegin[0m
[0;34mstd: [0m 5 4 3 2 1
[0;34mft : [0m 5 4 3 2 1
[0;33m
-- rend[0m
[0;34mstd: [0m 5 4 3 2 1
[0;34mft : [0m 5 4 3 2 1

 [0;33m
---| capacity_vector | ---[0m
[0;32m#[0m len - 9 | capacity - 16 [0;32m\[0mFirst -> | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | <- Last
[0;32m#[0m len - 9 | capacity - 16 [0;32m\[0mFirst -> | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | <- Last
[0;33m
-- size[0m
[0;34mstd: [0m9
[0;34mft : [0m9
[0;33m
-- max.size()[0m
[0;34mstd: [0mmax_size - 4611686018427387903
[0;34mft : [0mmax_size - 4611686018427387903
[0;33m
-- resize()[0m
[0;34mstd: [0m[0;32m#[0m len - 9 | capacity - 16 [0;32m\[0mFirst -> | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | <- Last
[0;34mft : [0m[0;32m#[0m len - 9 | capacity - 16 [0;32m\[0mFirst -> | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | <- Last
[0;34m- resize(5):[0m
[0;34mstd: [0m[0;32m#[0m len - 5 | capacity - 16 [0;32m\[0mFirst -> | 1 | 2 | 3 | 4 | 5 | <- Last
[0;34mft : [0m[0;32m#[0m len - 5 | capacity - 16 [0;32m\[0mFirst -> | 1 | 2 | 3 | 4 | 5 | <- Last
[0;34m- resize(8,100):[0m
[0;34mstd: [0m[0;32m#[0m len - 8 | capacity - 16 [0;32m\[0mFirst -> | 1 | 2 | 3 | 4 | 5 | 100 | 100 | 100 | <- Last
[0;34mft : [0m[0;32m#[0m len - 8 | capacity - 16 [0;32m\[0mFirst -> | 1 | 2 | 3 | 4 | 5 | 100 | 100 | 100 | <- Last
[0;34m- resize(12):[0m
[0;34mstd: [0m[0;32m#[0m len - 12 | capacity - 16 [0;32m\[0mFirst -> | 1 | 2 | 3 | 4 | 5 | 100 | 100 | 100 | 0 | 0 | 0 | 0 | <- Last
[0;34mft : [0m[0;32m#[0m len - 12 | capacity - 16 [0;32m\[0mFirst -> | 1 | 2 | 3 | 4 | 5 | 100 | 100 | 100 | 0 | 0 | 0 | 0 | <- Last
[0;33m
-- capacity[0m
[0;34mstd: [0m16
[0;34mft : [0m16
[0;33m
-- empty vector[0m
[0;34mstd: [0m0
[0;34mft : [0m0
[0;34m
- clear():[0m
[0;34mstd: [0m1
[0;34mft : [0m1
[0;33m
-- reserve[0m
[0;34mstd:[0m
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128

making bar grow:
capacity changed: 100
[0;34m
ft:[0m
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128

making bar grow:
capacity changed: 100

 [0;33m
---| element_access_vector | ---[0m
[0;33m
-- operator[][0m
[0;34mstd: [0mmyvector contains: 9 8 7 6 5 4 3 2 1 0
[0;34mft : [0mmyvector contains: 9 8 7 6 5 4 3 2 1 0
[0;33m
-- at[0m
[0;34mstd: [0mmyvector contains: 0 1 2 3 4 5 6 7 8 9
[0;34mft : [0mmyvector contains: 0 1 2 3 4 5 6 7 8 9
[0;33m
-- front[0m
[0;34mstd: [0mmyvector.front() is now 62
[0;34mft : [0mmyvector.front() is now 62
[0;33m
-- back[0m
[0;34mstd: [0mmyvector contains: 10 9 8 7 6 5 4 3 2 1 0
[0;34mft : [0mmyvector contains: 10 9 8 7 6 5 4 3 2 1 0

 [0;33m
---| modifiers_vector | ---[0m
[0;33m
-- assign[0m
[0;34mstd: [0m[0;32m#[0m len - 7 | capacity - 7 [0;32m\[0mFirst -> | 100 | 100 | 100 | 100 | 100 | 100 | 100 | <- Last
[0;34mft : [0m[0;32m#[0m len - 7 | capacity - 7 [0;32m\[0mFirst -> | 100 | 100 | 100 | 100 | 100 | 100 | 100 | <- Last

[0;34mstd: [0m[0;32m#[0m len - 5 | capacity - 5 [0;32m\[0mFirst -> | 100 | 100 | 100 | 100 | 100 | <- Last
[0;34mft : [0m[0;32m#[0m len - 5 | capacity - 5 [0;32m\[0mFirst -> | 100 | 100 | 100 | 100 | 100 | <- Last

[0;34mstd: [0m[0;32m#[0m len - 3 | capacity - 3 [0;32m\[0mFirst -> | 1776 | 7 | 4 | <- Last
[0;34mft : [0m[0;32m#[0m len - 3 | capacity - 3 [0;32m\[0mFirst -> | 1776 | 7 | 4 | <- Last
[0;33m
-- pop_back[0m
[0;34mstd:[0m
[0;32m#[0m len - 3 | capacity - 4 [0;32m\[0mFirst -> | 100 | 200 | 300 | <- Last
The elements of myvector add up to 600
[0;32m#[0m len - 0 | capacity - 4 [0;32m\[0mFirst -> | <- Last
[0;34mft:[0m
[0;32m#[0m len - 3 | capacity - 4 [0;32m\[0mFirst -> | 100 | 200 | 300 | <- Last
The elements of myvector add up to 600
[0;32m#[0m len - 0 | capacity - 4 [0;32m\[0mFirst -> | <- Last
[0;33m
-- insert[0m
[0;34mstd: [0m[0;32m#[0m len - 3 | capacity - 3 [0;32m\[0mFirst -> | 100 | 100 | 100 | <- Last
[0;34mft : [0m[0;32m#[0m len - 3 | capacity - 3 [0;32m\[0mFirst -> | 100 | 100 | 100 | <- Last

[0;34mstd: [0m[0;32m#[0m len - 4 | capacity - 6 [0;32m\[0mFirst -> | 200 | 100 | 100 | 100 | <- Last
[0;34mft : [0m[0;32m#[0m len - 4 | capacity - 6 [0;32m\[0mFirst -> | 200 | 100 | 100 | 100 | <- Last

[0;34mstd: [0m[0;32m#[0m len - 6 | capacity - 6 [0;32m\[0mFirst -> | 300 | 300 | 200 | 100 | 100 | 100 | <- Last
[0;34mft : [0m[0;32m#[0m len - 6 | capacity - 6 [0;32m\[0mFirst -> | 300 | 300 | 200 | 100 | 100 | 100 | <- Last

[0;34mstd: [0m[0;32m#[0m len - 6 | capacity - 6 [0;32m\[0mFirst -> | 300 | 300 | 200 | 100 | 100 | 100 | <- Last
[0;34mft : [0m[0;32m#[0m len - 6 | capacity - 6 [0;32m\[0mFirst -> | 300 | 300 | 200 | 100 | 100 | 100 | <- Last

[0;34mstd: [0m[0;32m#[0m len - 8 | capacity - 12 [0;32m\[0mFirst -> | 300 | 300 | 400 | 400 | 200 | 100 | 100 | 100 | <- Last
[0;34mft : [0m[0;32m#[0m len - 8 | capacity - 12 [0;32m\[0mFirst -> | 300 | 300 | 400 | 400 | 200 | 100 | 100 | 100 | <- Last

[0;34mstd: [0m[0;32m#[0m len - 11 | capacity - 12 [0;32m\[0mFirst -> | 501 | 502 | 503 | 300 | 300 | 400 | 400 | 200 | 100 | 100 | 100 | <- Last
[0;34mft : [0m[0;32m#[0m len - 11 | capacity - 12 [0;32m\[0mFirst -> | 501 | 502 | 503 | 300 | 300 | 400 | 400 | 200 | 100 | 100 | 100 | <- Last

[0;33m
-- erase[0m
[0;34mstd: [0m[0;32m#[0m len - 10 | capacity - 16 [0;32m\[0mFirst -> | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | <- Last
[0;34mft : [0m[0;32m#[0m len - 10 | capacity - 16 [0;32m\[0mFirst -> | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | <- Last

[0;34mstd: [0m[0;32m#[0m len - 9 | capacity - 16 [0;32m\[0mFirst -> | 1 | 2 | 3 | 4 | 5 | 7 | 8 | 9 | 10 | <- Last
[0;34mft : [0m[0;32m#[0m len - 9 | capacity - 16 [0;32m\[0mFirst -> | 1 | 2 | 3 | 4 | 5 | 7 | 8 | 9 | 10 | <- Last

[0;34mstd: [0m[0;32m#[0m len - 6 | capacity - 16 [0;32m\[0mFirst -> | 4 | 5 | 7 | 8 | 9 | 10 | <- Last
[0;34mft : [0m[0;32m#[0m len - 6 | capacity - 16 [0;32m\[0mFirst -> | 4 | 5 | 7 | 8 | 9 | 10 | <- Last

[0;34mstd: [0m[0;32m#[0m len - 4 | capacity - 16 [0;32m\[0mFirst -> | 4 | 5 | 9 | 10 | <- Last
[0;34mft : [0m[0;32m#[0m len - 4 | capacity - 16 [0;32m\[0mFirst -> | 4 | 5 | 9 | 10 | <- Last

[0;33m
-- swap[0m
[0;34mstd:[0m
[0;32m#[0m len - 3 | capacity - 3 [0;32m\[0mFirst -> | 100 | 100 | 100 | <- Last
[0;32m#[0m len - 5 | capacity - 5 [0;32m\[0mFirst -> | 200 | 200 | 200 | 200 | 200 | <- Last
[0;34mswap:[0m
[0;32m#[0m len - 5 | capacity - 5 [0;32m\[0mFirst -> | 200 | 200 | 200 | 200 | 200 | <- Last
[0;32m#[0m len - 3 | capacity - 3 [0;32m\[0mFirst -> | 100 | 100 | 100 | <- Last

[0;34mft :[0m
[0;32m#[0m len - 3 | capacity - 3 [0;32m\[0mFirst -> | 100 | 100 | 100 | <- Last
[0;32m#[0m len - 5 | capacity - 5 [0;32m\[0mFirst -> | 200 | 200 | 200 | 200 | 200 | <- Last
[0;34mswap:[0m
[0;32m#[0m len - 5 | capacity - 5 [0;32m\[0mFirst -> | 200 | 200 | 200 | 200 | 200 | <- Last
[0;32m#[0m len - 3 | capacity - 5 [0;32m\[0mFirst -> | 100 | 100 | 100 | <- Last
[0;33m
-- clear[0m
[0;34mstd:[0m
myvector contains: 100 200 300
myvector contains: 1101 2202
[0;34mft :[0m
myvector contains: 100 200 300
myvector contains: 1101 2202

 [0;33m
---| non_member_function_overloads_vector | ---[0m
[0;33m
-- relational operators[0m
[0;34mstd:[0m
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
[0;34mft :[0m
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
[0;33m
-- swap[0m
foo contains: 200 200 200 200 200
bar contains: 100 100 100

 [0;35m
   ---| queue testing |---[0m


 [0;33m
---| queue base tests | ---[0m
[0;33m
-- constructing queues[0m
[0;34mstd:[0m
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
[0;34mft :[0m
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
[0;33m
-- empty[0m
[0;34mstd:[0m
total: 55
[0;34mft :[0m
total: 55
[0;33m
-- size[0m
[0;34mstd:[0m
0. size: 0
1. size: 5
2. size: 4
[0;34mft :[0m
0. size: 0
1. size: 5
2. size: 4
[0;33m
-- front[0m
[0;34mstd:[0m
myqueue.front() is now 61
[0;34mft :[0m
myqueue.front() is now 61
[0;33m
-- back[0m
[0;34mstd:[0m
myqueue.back() is now 63
[0;34mft :[0m
myqueue.back() is now 63
[0;33m
-- push/pop[0m
[0;34mstd:[0m
 4040 42 21 0 -4040
[0;34mft :[0m
 4040 42 21 0 -4040

 [0;33m
---| non member function overloads queue | ---[0m
[0;33m
-- swap[0m
[0;34mstd:[0m
size of foo: 2
size of bar: 3
[0;34mft :[0m
size of foo: 2
size of bar: 3
[0;33m
-- relational operators[0m
[0;34mstd:[0m
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
[0;34mft :[0m
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar

 [0;35m
   ---| stack testing |---[0m


 [0;33m
---| stack base tests | ---[0m
[0;33m
-- constructing stack[0m
[0;34mstd:[0m
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
[0;34mft :[0m
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
[0;33m
-- stack::empty[0m
[0;34mstd:[0m
total: 55
[0;34mft :[0m
total: 55
[0;33m
-- stack::size[0m
[0;34mstd:[0m
0. size: 0
1. size: 5
2. size: 4
[0;34mft :[0m
0. size: 0
1. size: 5
2. size: 4
[0;33m
-- stack::top[0m
[0;34mstd:[0m
mystack.top() is now 15
[0;34mft :[0m
mystack.top() is now 15
[0;33m
-- stack::push/pop[0m
[0;34mstd:[0m
Popping out elements... 4 3 2 1 0
[0;34mft :[0m
Popping out elements... 4 3 2 1 0

 [0;33m
---| non member function overloads stack | ---[0m
[0;33m
-- swap[0m
[0;34mstd:[0m
size of foo: 2
size of bar: 3
[0;34mft :[0m
size of foo: 2
size of bar: 3
[0;33m
-- relational operators[0m
[0;34mstd:[0m
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
[0;34mft :[0m
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar

 [0;35m
   ---| map testing |---[0m


 [0;33m
---| map base tests | ---[0m
[0;33m
-- constructing map[0m
[0;34mstd:[0m
1 :10|
2 :10|

size :0| 1| 2| 3| 4| 5|
0: 'a'/7|
1: 'b'/13|
2: 'c'/21|
3: 'd'/26|
4: 'e'/42|
---
4: 'e'/42|
3: 'd'/26|
2: 'c'/21|
1: 'b'/13|
0: 'a'/7|
[0;34mft :[0m

size :0| 1| 2| 3| 4| 5|
0: 'a'/7|
1: 'b'/13|
2: 'c'/21|
3: 'd'/26|
4: 'e'/42|
---
4: 'e'/42|
3: 'd'/26|
2: 'c'/21|
1: 'b'/13|
0: 'a'/7|

                                 a                                                              
                 x                               c                              
         x               x               b               e              
     x       x       x       x       x       x       d              

- balance -
size :0| 1| 2| 3| 4| 5|
0: 'a'/7|
1: 'b'/13|
2: 'c'/21|
3: 'd'/26|
4: 'e'/42|
---
4: 'e'/42|
3: 'd'/26|
2: 'c'/21|
1: 'b'/13|
0: 'a'/7|

                 c                              
         a               e              
     x       b       d              

----CONST ITERATORS----


                                                                 -1                                                                                                                               x                                                                                                                               x                                                                                                                               21                                                                                                                              
                                 -2                                                               x                                                               x                                                               x                                                               x                                                               x                                                               x                                                               22                                                              
                 -3                               x                               x                               x                               x                               x                               x                               x                               x                               x                               x                               x                               x                               x                               x                               23                              
         -4               x               x               x               x               x               x               x               x               x               x               x               x               x               x               x               x               x               x               x               x               x               x               x               x               x               x               x               x               x               x               24              
     -5       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       x       25      

 [0;35m
   ---\ End of testing /---
[0m


10 seconds to complete the test
...
5 seconds left
4 seconds left
3 seconds left
2 seconds left
1 second left
